// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String?  @unique
  mobile       String?  @unique
  password     String
  profileImage String?
  CoverImage   String?
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @db.Timestamp(0)

  posts        Post[]
  comments     Comment[]
  Like         Like[]
  senders      Relationship[] @relation(name: "sender")
  receiver     Relationship[] @relation(name: "receiver")
}

model Post {
  id        Int      @id @default(autoincrement())
  message   String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  userId   Int
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  userId    Int
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id],onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@id([userId, postId])
}

enum RelationshipStatus {
  PENDING
  ACCEPTED
}

model Relationship {
  id         Int                @id @default(autoincrement())
  status     RelationshipStatus @default(PENDING)
  createdAt  DateTime           @default(now()) @db.Timestamp(0)
  updatedAt  DateTime           @updatedAt @db.Timestamp(0)
  senderId   Int
  receiverId Int
  sender     User               @relation(name: "sender", fields: [senderId], references: [id],onDelete: Cascade)
  receiver   User               @relation(name: "receiver", fields: [receiverId], references: [id],onDelete: Cascade)
  
}
